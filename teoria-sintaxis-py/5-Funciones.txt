permiten encapsular tareas específicas y ejecutarlas cuando sea necesario

<<<DEFINICION Y LLAMADA>>>

def nombre():
    #Instrucciones

nombre()  #Realiza las Instrucciones


<<<PARAMETROS Y ARGUMENTOS>>>
def saludo(parametro):
    print("¡Hola, {parametro}!")

saludo("nombre") #imprime "hola, nombre"


<<<VALORES DE RETORNO>>>
def suma(a, b):
    return a + b #Devuelve el valor al codigo

resultado = suma(3, 4)
print(resultado)  # Imprime 7


<<<FUNCIONES ANONIMAS>>> (sin nombre definidas en una sola línea)
cuadrado = lambda x: x ** 2
print(cuadrado(5))  # Imprime 25

<<<ALCANCE DE VARIABLES lOCAL-GLOBAL>>> 
def funcion():
    variable_local = 10
    print(variable_local)  # Accesible dentro de la función

variable_global = 20 #Fuera de la funcion

def funcion2():
    print(variable_global)  # Accesible desde cualquier lugar

funcion()  # Imprime 10
funcion2()  # Imprime 20

<<<FUNCIONES DOCSTRINGS>>>
Los docstrings son cadenas de texto que describen el propósito
def area_rectangulo(base, altura):
    """
    Calcula el área de un rectángulo.


    Args:
        base (float): La base del rectángulo.
        altura (float): La altura del rectángulo.


    Returns:
        float: El área del rectángulo.
    """
    return base * altura

<<<FUNCIONES CON NUMERO VARIABLE DE ARGUMENTOS>>>
def suma_variable(*numeros):
    total = 0
    for numero in numeros:
        total += numero
    return total

print(suma_variable(1, 2, 3))  # Imprime 6
print(suma_variable(4, 5, 6, 7))  # Imprime 22

